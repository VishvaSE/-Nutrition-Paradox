import pandas as pd
import requests

# URLs for the datasets
urls = {
    "obesity_adults": "https://ghoapi.azureedge.net/api/NCD_BMI_30C",
    "obesity_children": "https://ghoapi.azureedge.net/api/NCD_BMI_PLUS2C",
    "malnutrition_adults": "https://ghoapi.azureedge.net/api/NCD_BMI_18C",
    "malnutrition_children": "https://ghoapi.azureedge.net/api/NCD_BMI_MINUS2C",
}

def fetch_data(url):
    r = requests.get(url)
    data = r.json()
    df = pd.json_normalize(data['value'])
    return df

# Load datasets
df_obesity_adults = fetch_data(urls['obesity_adults'])
df_obesity_children = fetch_data(urls['obesity_children'])
df_malnutrition_adults = fetch_data(urls['malnutrition_adults'])
df_malnutrition_children = fetch_data(urls['malnutrition_children'])

print("Datasets loaded:")
print("Obesity adults:", df_obesity_adults.shape)
print("Obesity children:", df_obesity_children.shape)
print("Malnutrition adults:", df_malnutrition_adults.shape)
print("Malnutrition children:", df_malnutrition_children.shape)

output:

Datasets loaded:
Obesity adults: (20790, 25)
Obesity children: (62370, 25)
Malnutrition adults: (20790, 25)
Malnutrition children: (62370, 25)


!pip install pycountry
import pycountry

# Add 'age_group' column
df_obesity_adults['age_group'] = 'Adult'
df_obesity_children['age_group'] = 'Child/Adolescent'
df_malnutrition_adults['age_group'] = 'Adult'
df_malnutrition_children['age_group'] = 'Child/Adolescent'

# Combine obesity datasets
df_obesity = pd.concat([df_obesity_adults, df_obesity_children], ignore_index=True)

# Combine malnutrition datasets
df_malnutrition = pd.concat([df_malnutrition_adults, df_malnutrition_children], ignore_index=True)

# Filter years 2012 to 2022
df_obesity = df_obesity[df_obesity['TimeDim'].astype(int).between(2012, 2022)]
df_malnutrition = df_malnutrition[df_malnutrition['TimeDim'].astype(int).between(2012, 2022)]

# Columns to keep
cols_to_keep = ['ParentLocation', 'Dim1', 'TimeDim', 'Low', 'High', 'NumericValue', 'SpatialDim', 'age_group']

df_obesity = df_obesity[cols_to_keep].copy()
df_malnutrition = df_malnutrition[cols_to_keep].copy()

# Rename columns
rename_dict = {
    'TimeDim': 'Year',
    'Dim1': 'Gender',
    'NumericValue': 'Mean_Estimate',
    'Low': 'LowerBound',
    'High': 'UpperBound',
    'ParentLocation': 'Region',
    'SpatialDim': 'Country',
    'age_group': 'Age_Group'
}

df_obesity.rename(columns=rename_dict, inplace=True)
df_malnutrition.rename(columns=rename_dict, inplace=True)

# Standardize Gender values
def standardize_gender(g):
    g = g.lower()
    if 'male' in g:
        return 'Male'
    elif 'female' in g:
        return 'Female'
    else:
        return 'Both'

df_obesity['Gender'] = df_obesity['Gender'].apply(standardize_gender)
df_malnutrition['Gender'] = df_malnutrition['Gender'].apply(standardize_gender)

# Convert 3-letter country codes to full country names using pycountry
def convert_country(code):
    special_cases = {
        'GLOBAL': 'Global',
        'WB_LMI': 'Low & Middle Income',
        'WB_HI': 'High Income',
        'WB_LI': 'Low Income',
        'EMR': 'Eastern Mediterranean Region',
        'EUR': 'Europe',
        'AFR': 'Africa',
        'SEAR': 'South-East Asia Region',
        'WPR': 'Western Pacific Region',
        'AMR': 'Americas Region',
        'WB_UMI': 'Upper Middle Income'
    }
    if code in special_cases:
        return special_cases[code]
    try:
        return pycountry.countries.get(alpha_3=code).name
    except:
        return code

df_obesity['Country'] = df_obesity['Country'].apply(convert_country)
df_malnutrition['Country'] = df_malnutrition['Country'].apply(convert_country)

# Calculate Confidence Interval Width
df_obesity['CI_Width'] = df_obesity['UpperBound'] - df_obesity['LowerBound']
df_malnutrition['CI_Width'] = df_malnutrition['UpperBound'] - df_malnutrition['LowerBound']

# Categorize obesity levels
def categorize_obesity(val):
    if val >= 30:
        return 'High'
    elif 25 <= val < 30:
        return 'Moderate'
    else:
        return 'Low'

df_obesity['Obesity_Level'] = df_obesity['Mean_Estimate'].apply(categorize_obesity)

# Categorize malnutrition levels
def categorize_malnutrition(val):
    if val >= 20:
        return 'High'
    elif 10 <= val < 20:
        return 'Moderate'
    else:
        return 'Low'

df_malnutrition['Malnutrition_Level'] = df_malnutrition['Mean_Estimate'].apply(categorize_malnutrition)

# Final columns ordering (10 columns each)
df_obesity = df_obesity[['Year', 'Gender', 'Mean_Estimate', 'LowerBound', 'UpperBound', 'Age_Group', 'Country', 'Region', 'CI_Width', 'Obesity_Level']]
df_malnutrition = df_malnutrition[['Year', 'Gender', 'Mean_Estimate', 'LowerBound', 'UpperBound', 'Age_Group', 'Country', 'Region', 'CI_Width', 'Malnutrition_Level']]

print("Obesity cleaned:", df_obesity.shape)
print("Malnutrition cleaned:", df_malnutrition.shape)


output:

Obesity cleaned: (27720, 10)
Malnutrition cleaned: (27720, 10)



!pip install seaborn matplotlib
# For obesity dataset
print("Obesity Dataset Info:")
print(df_obesity.info())
print("\nMissing values in obesity dataset:")
print(df_obesity.isnull().sum())

# For malnutrition dataset
print("\nMalnutrition Dataset Info:")
print(df_malnutrition.info())
print("\nMissing values in malnutrition dataset:")
print(df_malnutrition.isnull().sum())

print("\nObesity Dataset Summary Statistics:")
print(df_obesity.describe())

print("\nMalnutrition Dataset Summary Statistics:")
print(df_malnutrition.describe())

output:

Obesity Dataset Summary Statistics:
               **Year  Mean\_Estimate    LowerBound    UpperBound      CI\_Width**

count  27720.000000   27720.000000  27720.000000  27720.000000  27720.000000
mean    2017.000000      12.761040      9.393155     17.068488      7.675334
std        3.162335      10.858925      9.893854     12.395013      6.616899
min     2012.000000       0.265672      0.077541      0.547848      0.216695
25%     2014.000000       4.753964      2.354433      7.875503      2.926708
50%     2017.000000       9.944541      6.506534     13.704382      5.480536
75%     2020.000000      17.482417     12.697752     23.986050     10.338880
max     2022.000000      80.609250     74.365371     87.868512     40.554062

Malnutrition Dataset Summary Statistics:
               **Year  Mean\_Estimate    LowerBound    UpperBound      CI\_Width**

count  27720.000000   27720.000000  27720.000000  27720.000000  27720.000000
mean    2017.000000       5.354451      3.397094      8.147889      4.750795
std        3.162335       4.811220      3.908061      6.443692      4.257683
min     2012.000000       0.175309      0.023703      0.354833      0.166679
25%     2014.000000       2.039278      1.053666      3.143307      1.603222
50%     2017.000000       3.597794      1.907971      6.095557      3.351093
75%     2020.000000       7.335245      4.186440     11.526301      6.530869
max     2022.000000      35.894114     31.365401     43.680286     26.701744

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12,5))
sns.histplot(df_obesity['Mean_Estimate'], bins=30, kde=True, color='orange')
plt.title('Distribution of Mean Estimate - Obesity')
plt.xlabel('Mean Estimate (%)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12,5))
sns.histplot(df_malnutrition['Mean_Estimate'], bins=30, kde=True, color='green')
plt.title('Distribution of Mean Estimate - Malnutrition')
plt.xlabel('Mean Estimate (%)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(14,6))
sns.boxplot(data=df_obesity, x='Region', y='CI_Width')
plt.title('Confidence Interval Width by Region - Obesity')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(14,6))
sns.boxplot(data=df_malnutrition, x='Region', y='CI_Width')
plt.title('Confidence Interval Width by Region - Malnutrition')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_obesity, x='Year', y='Mean_Estimate', hue='Region')
plt.title('Obesity Trends Over Years by Region')
plt.ylabel('Mean Estimate (%)')
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_malnutrition, x='Year', y='Mean_Estimate', hue='Region')
plt.title('Malnutrition Trends Over Years by Region')
plt.ylabel('Mean Estimate (%)')
plt.show()

plt.figure(figsize=(8,5))
sns.barplot(data=df_obesity, x='Gender', y='Mean_Estimate', ci=None)
plt.title('Average Obesity Mean Estimate by Gender')
plt.show()

plt.figure(figsize=(8,5))
sns.barplot(data=df_malnutrition, x='Gender', y='Mean_Estimate', ci=None)
plt.title('Average Malnutrition Mean Estimate by Gender')
plt.show()


# Assuming 'Age_Group' column exists in both dataframes
df_combined = pd.concat([
    df_obesity[['Mean_Estimate', 'Age_Group']].assign(Condition='Obesity'),
    df_malnutrition[['Mean_Estimate', 'Age_Group']].assign(Condition='Malnutrition')
])

plt.figure(figsize=(12,6))
sns.violinplot(x='Age_Group', y='Mean_Estimate', hue='Condition', data=df_combined, split=True)
plt.title('Mean Estimate Distribution by Age Group: Obesity vs Malnutrition')
plt.show()



plt.figure(figsize=(8,6))
sns.heatmap(df_obesity[['Mean_Estimate', 'CI_Width', 'LowerBound', 'UpperBound']].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap - Obesity')
plt.show()

plt.figure(figsize=(8,6))
sns.heatmap(df_malnutrition[['Mean_Estimate', 'CI_Width', 'LowerBound', 'UpperBound']].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap - Malnutrition')
plt.show()


plt.figure(figsize=(10,6))
sns.scatterplot(data=df_obesity, x='Mean_Estimate', y='CI_Width', hue='Region')
plt.title('Obesity: Mean Estimate vs CI Width by Region')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(data=df_malnutrition, x='Mean_Estimate', y='CI_Width', hue='Region')
plt.title('Malnutrition: Mean Estimate vs CI Width by Region')
plt.show()




import sqlite3

# Connect to (or create) SQLite database
conn = sqlite3.connect('nutrition_data.db')
cursor = conn.cursor()

# Drop tables if exist (to avoid duplicates on re-run)
cursor.execute("DROP TABLE IF EXISTS obesity;")
cursor.execute("DROP TABLE IF EXISTS malnutrition;")

# Create obesity table
cursor.execute("""
CREATE TABLE obesity (
    Year INTEGER,
    Gender TEXT,
    Mean_Estimate REAL,
    LowerBound REAL,
    UpperBound REAL,
    Age_Group TEXT,
    Country TEXT,
    Region TEXT,
    CI_Width REAL,
    Obesity_Level TEXT
);
""")

# Create malnutrition table
cursor.execute("""
CREATE TABLE malnutrition (
    Year INTEGER,
    Gender TEXT,
    Mean_Estimate REAL,
    LowerBound REAL,
    UpperBound REAL,
    Age_Group TEXT,
    Country TEXT,
    Region TEXT,
    CI_Width REAL,
    Malnutrition_Level TEXT
);
""")

conn.commit()

# Insert data into obesity table
df_obesity.to_sql('obesity', conn, if_exists='append', index=False)

# Insert data into malnutrition table
df_malnutrition.to_sql('malnutrition', conn, if_exists='append', index=False)

print("Data inserted successfully into SQLite database.")

output:
Data inserted successfully into SQLite database.

# Step 1: Writting the Streamlit app code with 25 queries to file
app_code = """
import streamlit as st
import sqlite3
import pandas as pd

conn = sqlite3.connect('nutrition_data.db')

queries = {
    "Top 5 regions with highest avg obesity in 2022": \"""
        SELECT Region, AVG(Mean_Estimate) AS Avg_Obesity
        FROM obesity
        WHERE Year = 2022
        GROUP BY Region
        ORDER BY Avg_Obesity DESC
        LIMIT 5;
    \""",

    "Top 5 countries with highest obesity estimates": \"""
        SELECT Country, Mean_Estimate
        FROM obesity
        WHERE Year = 2022
        ORDER BY Mean_Estimate DESC
        LIMIT 5;
    \""",

    "Obesity trend in India over the years": \"""
        SELECT Year, AVG(Mean_Estimate) AS Avg_Obesity
        FROM obesity
        WHERE Country = 'India'
        GROUP BY Year
        ORDER BY Year;
    \""",

    "Average obesity by gender": \"""
        SELECT Gender, AVG(Mean_Estimate) AS Avg_Obesity
        FROM obesity
        GROUP BY Gender;
    \""",

    "Country count by obesity level category and age group": \"""
        SELECT Obesity_Level, Age_Group, COUNT(DISTINCT Country) AS Country_Count
        FROM obesity
        GROUP BY Obesity_Level, Age_Group;
    \""",

    "Top 5 least reliable countries (highest CI_Width) in obesity": \"""
        SELECT Country, AVG(CI_Width) AS Avg_CI_Width
        FROM obesity
        GROUP BY Country
        ORDER BY Avg_CI_Width DESC
        LIMIT 5;
    \""",

    "Top 5 most consistent countries (lowest CI_Width) in obesity": \"""
        SELECT Country, AVG(CI_Width) AS Avg_CI_Width
        FROM obesity
        GROUP BY Country
        ORDER BY Avg_CI_Width ASC
        LIMIT 5;
    \""",

    "Average obesity by age group": \"""
        SELECT Age_Group, AVG(Mean_Estimate) AS Avg_Obesity
        FROM obesity
        GROUP BY Age_Group;
    \""",

    "Top 10 countries with consistent low obesity over years": \"""
        SELECT Country, AVG(Mean_Estimate) AS Avg_Obesity, AVG(CI_Width) AS Avg_CI_Width
        FROM obesity
        GROUP BY Country
        HAVING Avg_Obesity < 25 AND Avg_CI_Width < 2
        ORDER BY Avg_Obesity ASC
        LIMIT 10;
    \""",

    "Countries where female obesity exceeds male by large margin in same year": \"""
        SELECT o1.Country, o1.Year, (o1.Mean_Estimate - o2.Mean_Estimate) AS Female_Minus_Male
        FROM obesity o1
        JOIN obesity o2 ON o1.Country = o2.Country AND o1.Year = o2.Year
        WHERE o1.Gender = 'Female' AND o2.Gender = 'Male' AND (o1.Mean_Estimate - o2.Mean_Estimate) > 5
        ORDER BY Female_Minus_Male DESC;
    \""",

    "Global average obesity percentage per year": \"""
        SELECT Year, AVG(Mean_Estimate) AS Avg_Obesity
        FROM obesity
        GROUP BY Year
        ORDER BY Year;
    \""",

    # Malnutrition Queries (10)
    "Average malnutrition by age group": \"""
        SELECT Age_Group, AVG(Mean_Estimate) AS Avg_Malnutrition
        FROM malnutrition
        GROUP BY Age_Group;
    \""",

    "Top 5 countries with highest malnutrition": \"""
        SELECT Country, Mean_Estimate
        FROM malnutrition
        WHERE Year = 2022
        ORDER BY Mean_Estimate DESC
        LIMIT 5;
    \""",

    "Malnutrition trend in African region over years": \"""
        SELECT Year, AVG(Mean_Estimate) AS Avg_Malnutrition
        FROM malnutrition
        WHERE Region = 'Africa'
        GROUP BY Year
        ORDER BY Year;
    \""",

    "Gender-based average malnutrition": \"""
        SELECT Gender, AVG(Mean_Estimate) AS Avg_Malnutrition
        FROM malnutrition
        GROUP BY Gender;
    \""",

    "Malnutrition level-wise avg CI_Width by age group": \"""
        SELECT Malnutrition_Level, Age_Group, AVG(CI_Width) AS Avg_CI_Width
        FROM malnutrition
        GROUP BY Malnutrition_Level, Age_Group;
    \""",

    "Yearly malnutrition change in India, Nigeria, Brazil": \"""
        SELECT Country, Year, Mean_Estimate
        FROM malnutrition
        WHERE Country IN ('India', 'Nigeria', 'Brazil')
        ORDER BY Country, Year;
    \""",

    "Regions with lowest malnutrition averages": \"""
        SELECT Region, AVG(Mean_Estimate) AS Avg_Malnutrition
        FROM malnutrition
        GROUP BY Region
        ORDER BY Avg_Malnutrition ASC
        LIMIT 5;
    \""",

    "Countries with increasing malnutrition": \"""
        SELECT Country,
          MIN(Mean_Estimate) AS Min_Malnutrition,
          MAX(Mean_Estimate) AS Max_Malnutrition
        FROM malnutrition
        GROUP BY Country
        HAVING MAX(Mean_Estimate) > MIN(Mean_Estimate);
    \""",

    "Min/Max malnutrition levels year-wise comparison": \"""
        SELECT Year,
          MIN(Mean_Estimate) AS Min_Malnutrition,
          MAX(Mean_Estimate) AS Max_Malnutrition
        FROM malnutrition
        GROUP BY Year
        ORDER BY Year;
    \""",

    "High CI_Width flags for monitoring (CI_Width > 5)": \"""
        SELECT *
        FROM malnutrition
        WHERE CI_Width > 5
        ORDER BY CI_Width DESC;
    \""",

    # Combined Queries (5)
    "Obesity vs malnutrition comparison by country (5 countries)": \"""
        SELECT o.Country,
          o.Mean_Estimate AS Obesity,
          m.Mean_Estimate AS Malnutrition
        FROM obesity o
        JOIN malnutrition m ON o.Country = m.Country AND o.Year = m.Year
        WHERE o.Country IN ('India', 'USA', 'Brazil', 'Nigeria', 'China')
          AND o.Year = 2022;
    \""",

    "Gender-based disparity in both obesity and malnutrition": \"""
        SELECT o.Gender,
          AVG(o.Mean_Estimate) AS Avg_Obesity,
          AVG(m.Mean_Estimate) AS Avg_Malnutrition
        FROM obesity o
        JOIN malnutrition m ON o.Gender = m.Gender AND o.Year = m.Year
        GROUP BY o.Gender;
    \""",

    "Region-wise avg estimates side-by-side (Africa and America)": \"""
        SELECT o.Region,
          AVG(o.Mean_Estimate) AS Avg_Obesity,
          AVG(m.Mean_Estimate) AS Avg_Malnutrition
        FROM obesity o
        JOIN malnutrition m ON o.Region = m.Region AND o.Year = m.Year
        WHERE o.Region IN ('Africa', 'Americas Region')
        GROUP BY o.Region;
    \""",

    "Countries with obesity up & malnutrition down": \"""
        SELECT o.Country,
          MAX(o.Mean_Estimate) - MIN(o.Mean_Estimate) AS Obesity_Change,
          MAX(m.Mean_Estimate) - MIN(m.Mean_Estimate) AS Malnutrition_Change
        FROM obesity o
        JOIN malnutrition m ON o.Country = m.Country
        GROUP BY o.Country
        HAVING Obesity_Change > 0 AND Malnutrition_Change < 0;
    \""",

    "Age-wise trend analysis": \"""
        SELECT Age_Group,
          AVG(Mean_Estimate) AS Avg_Obesity,
          (SELECT AVG(Mean_Estimate) FROM malnutrition WHERE Age_Group = o.Age_Group) AS Avg_Malnutrition
        FROM obesity o
        GROUP BY Age_Group;
    \"""
}

st.title("Nutrition Paradox: SQL Query Explorer")

query_name = st.selectbox("Select a query to run:", list(queries.keys()))

if st.button("Run Query"):
    query = queries[query_name]
    df = pd.read_sql_query(query, conn)
    st.dataframe(df)
"""

with open('streamlit_app.py', 'w') as f:
    f.write(app_code)

print("Streamlit app code created.")


# Step 2: Running Streamlit app and expose with ngrok

# Install pyngrok and streamlit if not installed
!pip install pyngrok streamlit

from pyngrok import ngrok
import os
import threading
import time

# NGROK AUTHTOKEN HERE - Replace with actual token
NGROK_AUTH_TOKEN = "3107gz7tSHnH1uipCd2cBTXyYXV_5kyx95z37TrP7PGwDAZ2b"

# Authenticate ngrok
!ngrok authtoken {NGROK_AUTH_TOKEN}

# Kill previous tunnels if any
ngrok.kill()

# Function to run Streamlit app
def run_streamlit():
    os.system('streamlit run streamlit_app.py')

# Run Streamlit in a thread
threading.Thread(target=run_streamlit, daemon=True).start()

# Wait for Streamlit to start
time.sleep(5)

# Open ngrok tunnel on port 8501
public_url = ngrok.connect(8501)
print(f"Your Streamlit app is live at: {public_url}")


output:
https://101cdb8eca0f.ngrok-free.app/
